openapi: 3.0.0-RC0
servers: []
info:
  description: >-
    This is a machine learning API, designed to allow people to interact with a
    machine learning service over a network.
  version: 0.1.0
  title: Machine Learning REST
  termsOfService: ''
  contact:
    email: brylie.oxley@apinf.io
    name: Brylie Christopher Oxley
  license:
    name: Public Domain (Creative Commons Zero)
    url: 'https://creativecommons.org/publicdomain/zero/1.0/'
tags:
  - name: Classification
    description: Identify which group an observation belongs to.
  - name: Regression
    description: 'Predict values of a quantity, based on other observations.'
  - name: Clustering
    description: Find groups among observations.
  - name: Dimensionality reduction
    description: Simplify data by reducing the number of dimensions (e.g. attributes)
paths:
  /sklearn/svm/linear-svc:
    summary: >-
      Linear SVC is capable of performing multi-class classification on a
      dataset.
    put:
      summary: Create a new Linear SVC instance
      description: ''
      externalDocs:
        url: >-
          http://scikit-learn.org/stable/modules/generated/sklearn.svm.LinearSVC.html#sklearn.svm.LinearSVC
        description: >-
          Linear Support Vector Classification.


          Similar to SVC with parameter kernel=’linear’, but implemented in
          terms of liblinear rather than libsvm, so it has more flexibility in
          the choice of penalties and loss functions and should scale better to
          large numbers of samples.


          This class supports both dense and sparse input and the multiclass
          support is handled according to a one-vs-the-rest scheme.
      parameters:
        - name: C
          in: query
          required: false
          schema: {}
          description: Penalty parameter C of the error term.
          allowEmptyValue: false
        - name: loss
          in: query
          required: false
          schema:
            type: string
          description: >-
            Specifies the loss function. ‘hinge’ is the standard SVM loss (used
            e.g. by the SVC class) while ‘squared_hinge’ is the square of the
            hinge loss.
        - name: penalty
          in: query
          required: false
          schema:
            type: string
          description: >-
            Specifies the norm used in the penalization. The ‘l2’ penalty is the
            standard used in SVC. The ‘l1’ leads to coef_ vectors that are
            sparse.
        - name: dual
          in: query
          required: false
          schema:
            type: string
          description: >-
            Select the algorithm to either solve the dual or primal optimization
            problem. Prefer dual=False when n_samples > n_features.
        - name: tol
          in: query
          required: false
          schema:
            type: string
          description: Tolerance for stopping criteria.
        - name: multi_class
          in: query
          required: false
          schema:
            type: string
          description: >-
            Determines the multi-class strategy if y contains more than two
            classes. "ovr" trains n_classes one-vs-rest classifiers, while
            "crammer_singer" optimizes a joint objective over all classes. While
            crammer_singer is interesting from a theoretical perspective as it
            is consistent, it is seldom used in practice as it rarely leads to
            better accuracy and is more expensive to compute. If
            "crammer_singer" is chosen, the options loss, penalty and dual will
            be ignored.
        - name: fit_intercept
          in: query
          required: false
          schema:
            type: string
          description: >-
            Whether to calculate the intercept for this model. If set to false,
            no intercept will be used in calculations (i.e. data is expected to
            be already centered).
        - name: intercept_scaling
          in: query
          required: false
          schema:
            type: string
          description: >-
            When self.fit_intercept is True, instance vector x becomes [x,
            self.intercept_scaling], i.e. a “synthetic” feature with constant
            value equals to intercept_scaling is appended to the instance
            vector. The intercept becomes intercept_scaling * synthetic feature
            weight Note! the synthetic feature weight is subject to l1/l2
            regularization as all other features. To lessen the effect of
            regularization on synthetic feature weight (and therefore on the
            intercept) intercept_scaling has to be increased.
        - name: class_weight
          in: query
          required: false
          schema:
            type: string
          description: >-
            Set the parameter C of class i to class_weight[i]*C for SVC. If not
            given, all classes are supposed to have weight one. The “balanced”
            mode uses the values of y to automatically adjust weights inversely
            proportional to class frequencies in the input data as n_samples /
            (n_classes * np.bincount(y))
        - name: verbose
          in: query
          required: false
          schema:
            type: string
          description: >-
            Enable verbose output. Note that this setting takes advantage of a
            per-process runtime setting in liblinear that, if enabled, may not
            work properly in a multithreaded context.
        - name: random_state
          in: query
          required: false
          schema:
            type: string
          description: >-
            The seed of the pseudo random number generator to use when shuffling
            the data.
        - name: max_iter
          in: query
          required: false
          schema:
            type: string
          description: The maximum number of iterations to be run.
      operationId: ''
      responses:
        default:
          description: Default response
      tags:
        - Classification
  /sklearn/linear-model/linear-regression:
    summary: Ordinary least squares Linear Regression.
    description: >-
      From the implementation point of view, this is just plain Ordinary Least
      Squares (scipy.linalg.lstsq) wrapped as a predictor object.
    put:
      summary: Create an instance of Linear Regression classifier.
      description: ''
      externalDocs:
        url: >-
          http://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LinearRegression.html
      parameters:
        - name: fit_intercept
          in: query
          required: false
          schema:
            type: string
          description: >-
            whether to calculate the intercept for this model. If set to false,
            no intercept will be used in calculations (e.g. data is expected to
            be already centered).
        - name: normalize
          in: query
          required: false
          schema:
            type: string
          description: >-
            If True, the regressors X will be normalized before regression. This
            parameter is ignored when fit_intercept is set to False. When the
            regressors are normalized, note that this makes the hyperparameters
            learnt more robust and almost independent of the number of samples.
            The same property is not valid for standardized data. However, if
            you wish to standardize, please use preprocessing.StandardScaler
            before calling fit on an estimator with normalize=False.
        - name: copy_X
          in: query
          required: false
          schema:
            type: string
          description: 'If True, X will be copied; else, it may be overwritten.'
        - name: n_jobs
          in: query
          required: false
          schema:
            type: string
          description: >-
            The number of jobs to use for the computation. If -1 all CPUs are
            used. This will only provide speedup for n_targets > 1 and
            sufficient large problems.
      operationId: ''
      responses:
        default:
          description: Default response
      tags:
        - Regression
  /sklearn/cluster/kmeans:
    description: >-
      The KMeans algorithm clusters data by trying to separate samples in n
      groups of equal variance, minimizing a criterion known as the inertia or
      within-cluster sum-of-squares. This algorithm requires the number of
      clusters to be specified. It scales well to large number of samples and
      has been used across a large range of application areas in many different
      fields.
    summary: K-Means clustering
    put:
      summary: Create a KMeans classifier instance.
      description: ''
      externalDocs:
        url: >-
          http://scikit-learn.org/stable/modules/generated/sklearn.cluster.KMeans.html#sklearn.cluster.KMeans
      parameters:
        - name: n_clusters
          in: query
          required: false
          schema:
            type: string
          description: >-
            The number of clusters to form as well as the number of centroids to
            generate.
        - name: max_iter
          in: query
          required: false
          schema:
            type: string
          description: >-
            Maximum number of iterations of the k-means algorithm for a single
            run.
        - name: n_init
          in: query
          required: false
          schema:
            type: string
          description: >-
            Number of time the k-means algorithm will be run with different
            centroid seeds. The final results will be the best output of n_init
            consecutive runs in terms of inertia.
        - name: init
          in: query
          required: false
          schema:
            type: string
          description: |-


                Method for initialization, defaults to ‘k-means++’:

                ‘k-means++’ : selects initial cluster centers for k-mean clustering in a smart way to speed up convergence. See section Notes in k_init for more details.

                ‘random’: choose k observations (rows) at random from data for the initial centroids.

                If an ndarray is passed, it should be of shape (n_clusters, n_features) and gives the initial centers.
        - name: algorithm
          in: query
          required: false
          schema:
            type: string
          description: >-
            K-means algorithm to use. The classical EM-style algorithm is
            “full”. The “elkan” variation is more efficient by using the
            triangle inequality, but currently doesn’t support sparse data.
            “auto” chooses “elkan” for dense data and “full” for sparse data.
        - name: precompute_distances
          in: query
          required: false
          schema:
            type: string
          description: |


                Precompute distances (faster but takes more memory).

                ‘auto’ : do not precompute distances if n_samples * n_clusters > 12 million. This corresponds to about 100MB overhead per job using double precision.

                True : always precompute distances

                False : never precompute distances
        - name: tol
          in: query
          required: false
          schema:
            type: string
          description: Relative tolerance with regards to inertia to declare convergence
        - name: n_jobs
          in: query
          required: false
          schema:
            type: string
          description: |


                The number of jobs to use for the computation. This works by computing each of the n_init runs in parallel.

                If -1 all CPUs are used. If 1 is given, no parallel computing code is used at all, which is useful for debugging. For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus for n_jobs = -2, all CPUs but one are used.
        - name: random_state
          in: query
          required: false
          schema:
            type: string
          description: >-
            The generator used to initialize the centers. If an integer is
            given, it fixes the seed. Defaults to the global numpy random number
            generator.
        - name: verbose
          in: query
          required: false
          schema:
            type: string
          description: Verbosity mode.
        - name: copy_x
          in: query
          required: false
          schema:
            type: string
          description: >-
            When pre-computing distances it is more numerically accurate to
            center the data first. If copy_x is True, then the original data is
            not modified. If False, the original data is modified, and put back
            before the function returns, but small numerical differences may be
            introduced by subtracting and then adding the data mean.
      operationId: ''
      responses:
        default:
          description: Default response
      tags:
        - Clustering
  /sklearn/decomposition/pca:
    summary: Principal component analysis (PCA)
    description: >-
      Linear dimensionality reduction using Singular Value Decomposition of the
      data to project it to a lower dimensional space.


      It uses the LAPACK implementation of the full SVD or a randomized
      truncated SVD by the method of Halko et al. 2009, depending on the shape
      of the input data and the number of components to extract.


      It can also use the scipy.sparse.linalg ARPACK implementation of the
      truncated SVD.


      Notice that this class does not support sparse input. See TruncatedSVD for
      an alternative with sparse data.
    put:
      summary: Create a Principle Component Analysis instance.
      description: ''
      externalDocs:
        url: >-
          http://scikit-learn.org/stable/modules/generated/sklearn.decomposition.PCA.html
      parameters:
        - name: n_components
          in: query
          required: false
          schema:
            type: string
          description: |


                Number of components to keep. if n_components is not set all components are kept:

                n_components == min(n_samples, n_features)

                if n_components == ‘mle’ and svd_solver == ‘full’, Minka’s MLE is used to guess the dimension if 0 < n_components < 1 and svd_solver == ‘full’, select the number of components such that the amount of variance that needs to be explained is greater than the percentage specified by n_components n_components cannot be equal to n_features for svd_solver == ‘arpack’.
        - name: copy
          in: query
          required: false
          schema:
            type: string
          description: >-
            If False, data passed to fit are overwritten and running
            fit(X).transform(X) will not yield the expected results, use
            fit_transform(X) instead.
        - name: whiten
          in: query
          required: false
          schema:
            type: string
          description: >-
            When True (False by default) the components_ vectors are multiplied
            by the square root of n_samples and then divided by the singular
            values to ensure uncorrelated outputs with unit component-wise
            variances.


            Whitening will remove some information from the transformed signal
            (the relative variance scales of the components) but can sometime
            improve the predictive accuracy of the downstream estimators by
            making their data respect some hard-wired assumptions.
        - name: svd_solver
          in: query
          required: false
          schema:
            type: string
          description: |-

            auto :

                the solver is selected by a default policy based on X.shape and n_components: if the input data is larger than 500x500 and the number of components to extract is lower than 80% of the smallest dimension of the data, then the more efficient ‘randomized’ method is enabled. Otherwise the exact full SVD is computed and optionally truncated afterwards.
            full :

                run exact full SVD calling the standard LAPACK solver via scipy.linalg.svd and select the components by postprocessing
            arpack :

                run SVD truncated to n_components calling ARPACK solver via scipy.sparse.linalg.svds. It requires strictly 0 < n_components < X.shape[1]
            randomized :

                run randomized SVD by the method of Halko et al.
        - name: tol
          in: query
          required: false
          schema:
            type: string
          description: Tolerance for singular values computed by svd_solver == ‘arpack’.
        - name: iterated_power
          in: query
          required: false
          schema:
            type: string
          description: >-
            Number of iterations for the power method computed by svd_solver ==
            ‘randomized’.
        - name: random_state
          in: query
          required: false
          schema:
            type: string
          description: >-
            Pseudo Random Number generator seed control. If None, use the
            numpy.random singleton. Used by svd_solver == ‘arpack’ or
            ‘randomized’.
      operationId: ''
      responses:
        default:
          description: Default response
      tags:
        - Dimensionality reduction
components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
          default: false
      xml:
        name: Order
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
          description: User Status
      xml:
        name: User
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
        - name
        - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          $ref: '#/components/schemas/Category'
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: Pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
  responses: {}
  parameters: {}
  examples: {}
  requestBodies:
    requestBody1:
      content:
        application/json:
          description: Pet object that needs to be added to the store
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          description: Pet object that needs to be added to the store
          schema:
            $ref: '#/components/schemas/Pet'
    requestBody2:
      content:
        application/json:
          description: List of user object
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes: {}
  headers: {}
  links: {}
  callbacks: {}
security: []
